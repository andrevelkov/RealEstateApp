// <auto-generated />
using System;
using EstateDataAccess;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace EstateDataAccess.Migrations
{
    [DbContext(typeof(EstateContext))]
    [Migration("20241106104932_Initial")]
    partial class Initial
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.10")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("ModelsLibrary.Address", b =>
                {
                    b.Property<int?>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int?>("Id"));

                    b.Property<string>("City")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Country")
                        .HasColumnType("int");

                    b.Property<string>("Street")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ZipCode")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Address");
                });

            modelBuilder.Entity("ModelsLibrary.Models.Estate", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ID"));

                    b.Property<int>("AddressId")
                        .HasColumnType("int");

                    b.Property<string>("BaseType")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("LegalForm")
                        .HasColumnType("int");

                    b.HasKey("ID");

                    b.HasIndex("AddressId");

                    b.ToTable("Estates", (string)null);

                    b.UseTptMappingStrategy();
                });

            modelBuilder.Entity("ModelsLibrary.Models.Commercial", b =>
                {
                    b.HasBaseType("ModelsLibrary.Models.Estate");

                    b.Property<int>("SquareMeters")
                        .HasColumnType("int");

                    b.ToTable("Commercials", (string)null);
                });

            modelBuilder.Entity("ModelsLibrary.Models.Residential", b =>
                {
                    b.HasBaseType("ModelsLibrary.Models.Estate");

                    b.Property<int>("NumRooms")
                        .HasColumnType("int");

                    b.ToTable("Residentials", (string)null);
                });

            modelBuilder.Entity("ModelsLibrary.Models.Apartment", b =>
                {
                    b.HasBaseType("ModelsLibrary.Models.Residential");

                    b.Property<int>("Floor")
                        .HasColumnType("int");

                    b.ToTable("Apartments", (string)null);
                });

            modelBuilder.Entity("ModelsLibrary.Models.Estate", b =>
                {
                    b.HasOne("ModelsLibrary.Address", "Address")
                        .WithMany()
                        .HasForeignKey("AddressId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Address");
                });

            modelBuilder.Entity("ModelsLibrary.Models.Commercial", b =>
                {
                    b.HasOne("ModelsLibrary.Models.Estate", null)
                        .WithOne()
                        .HasForeignKey("ModelsLibrary.Models.Commercial", "ID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("ModelsLibrary.Models.Residential", b =>
                {
                    b.HasOne("ModelsLibrary.Models.Estate", null)
                        .WithOne()
                        .HasForeignKey("ModelsLibrary.Models.Residential", "ID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("ModelsLibrary.Models.Apartment", b =>
                {
                    b.HasOne("ModelsLibrary.Models.Residential", null)
                        .WithOne()
                        .HasForeignKey("ModelsLibrary.Models.Apartment", "ID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });
#pragma warning restore 612, 618
        }
    }
}
